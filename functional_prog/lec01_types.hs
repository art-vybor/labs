f::(Floating a, Num b) => a->a->a->b  3 флоатинга на вход одно число на выход
Подобные записи это - Сигнатуры. Они используются для задания типов функций когда это бывает необходимо.

Конструкции языка:
Встроеннные типы и действия с ними:
  - () - единичный тип (:t ())
  - Bool - булевский тип (True && False, True || False, not True)
  - Char - символьный тип, символы из юникода ('*', 'A', '\'', '\\', '\n', '\t' - обратный слеш экранирование)
  - Int - целый тип, не меньше 24 бит, особо не используется
  - Integer - целый тип произвольной точности
  - Float
  - Double - все операции оптимизированны под него
Возведение в степень: **, ^, ^^
-------
Классы типов:
  - Num
  - Floating - с плавающей точкой
  - Fractional - дробные
  - Integral - целые
-------
С ними можно делать операции: ==, <, >, <=, >=, /=
Eq - класс типов значения которыз можно сравнивать на равенство или не равенство
Ord - класс типов линейно упорядоченных значений
-------
Кортежи(tuple) - последовательности фиксированной длины из последовательностей разных типов.
Пример: (1, 'c', 1.0)
Обратить внимание на то что не равны: (1, 'x') \= ('x', 1)
fst - в качестве аргумента произвольный кортеж возвращает первый элементы
snd - возвращает второй элемент.
-------
Список - последовательность элементов одинакового типа
Задаётся: [1,2,3,4], [] -  пустой список
String синоним [Char]
[1,2,3]!!1 - Вернуть элемент с индексом 1 из списка, индексация начинается с нуля
[2,3] ++ [4,5] - Конкатенация списка
"ex" ++ "ample"
length [1,2,3] - Длина строки
-------
Функции:
S = 4*Pi*r^2
на Haskell
s r = 4*pi*r^2 - она самая
let ... - задать прямо в среде
s(2) - 50,265.. - так ей пользоваться
-------
-- Комментарий

{-
Многострочный
комментарий
-} 
-------
:load test
:l "test.hs"
:r
:reload
или
ghci test.hs
mySort::[a] -> [a] --на подобие шаблона функции
mySort::[Int]->[Int]
-------
fromInteger, fromIntegral - преобразование из Integral в Num
-------
minimize fn x0 x1 = ....
	....... fn x
f1 x = x^2
f2 x = sin x
minimize f1 (-1) 1
-------
Сопоставление с образцом
howmany :: Integer -> String
howmany 0 = "zero"
howmany 1 = "one"
howmany 2 = "two"
howmany _ = "many"
-------
n! = /1, n = 0
     \n*(n-1)!, n > 0
factorial 0 = 1
factorial n = n * factorial (n - 1)
тип: factorial Num a::a->a
-------
|x| = /x, x>=0
      \-x, x<0
abs x = if x >= 0 then x else -x
-------
Охранные условия(guards)
        /-1, x < 0
sgn x =|0, x = 0
        \1, x > 0
sgn x | x < 0 = -1
      | x == 0 = 0
      | otherwise = 1
-------
l = h*d, где d = 2*r
f x = ...d
  where
    d = ...
    g x = ...
-------
l r = let
  d = 2 * r
  int pi*d
-------
$
f (g x + h x)
f $ g x + h x

f$g$h x <=> f(g(h x))
-------
функция error
factorial 0 = 1
factorial n | n < 0     = error "n<0 in n!"
            | otherwise = n * factorial (n-1)
-------
полезная книга на сайте - learnyouahaskell.com
прочитать пару глав на ночь
Real World Haskell
ibm.com - русско язычный вводный курс статей по хаскелю в трёх статьях(примерно первая лекция)
Мягкое введение в Хаскель