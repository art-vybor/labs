#!/usr/bin/env python
# -*- coding: utf-8 -*-

import pymorphy2
import collections
import re

words = {
    'замок': [
        'Дворец владетельного рода; усадебный дом крупного помещика',
        'Крепость феодала',
        'Приспособление для запирания чего-нибудь на ключ.',
        'Часть ружья, винтовки, где воспламеняется заряд',
        'Способ соединения деревянных частей между собой',
    ],
    'корень': [
        'Вросшая в землю часть растения, через к-рую оно всасывает соки из почвы',
        'У волос, зубов, ногтей, когтей и т. п. часть, вросшая в тело.',
        'Основная часть слова без приставок и суффиксов',
        'Величина, к-рая при возведении в определенную степень дает данное число',
    ],
    'кисть': [
        'Приспособление для окрашивания или для обмазывания чем-нибудь (напр. клеем)',
        'Пучок шнурков, связанных вместе с верхнего конца, служащий украшением в драпировках и т.п.',
        'Несколько ягод или цветов на одном стебле',
        'Часть руки от запястья до конца пальцев',
    ],
    'ключ': [
        'Металлическое приспособление для отпирания и запирания замка.',
        'Система обозначений букв, на к-рой построен какой-н. способ прочтения шифрованного текста',
        'Элементарно изложенное пособие для лучшего понимания, усвоения чего-н. трудного',
        'Та или иная система нотного изображения музыкальных звуков, обозначаемая особым графическим знаком в начале музыкальной пьесы, строки, такта.',
        'Бьющий из земли источник, родник',
        'Верхний камень, к-рым замыкается свод',
    ],
    'ручка': [
        'Часть предмета, за которую его держат или берут рукой.',
        'Письменная принадлежность, палочка, в которую вставляется перо.',
    ]
}

#sent = 'Для запирания двери на замок необходим ключ'
#sent = 'У меня разболелся корень зуба'
sent = 'У девушки была очень изящная кисть и длинные пальцы'
#sent = 'У чашки отбилась ручка'

morph = pymorphy2.MorphAnalyzer()

def getLemm(word):
    return morph.parse(word)[0].normal_form.encode('utf-8')

def getLemmSet(text):
    text = re.sub('[-;.,]', ' ', text)
    return set(map(getLemm, text.decode('utf-8').split()))


sent_set = getLemmSet(sent)

print sent

for word in list(sent_set):
    if word in words:
        values = {}
        for value in words[word]:
            values[value] = list(getLemmSet(value).intersection(sent_set))
        values = sorted(values.items(), key=lambda x:len(x[1]), reverse=True)
        print '%s value is: %s - (%s)' % (word, values[0][0], ', '.join(values[0][1]))













